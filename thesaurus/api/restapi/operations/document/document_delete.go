// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/thesaurus/api/models"
)

// DocumentDeleteHandlerFunc turns a function with the right signature into a document delete handler
type DocumentDeleteHandlerFunc func(DocumentDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DocumentDeleteHandlerFunc) Handle(params DocumentDeleteParams) middleware.Responder {
	return fn(params)
}

// DocumentDeleteHandler interface for that can handle valid document delete params
type DocumentDeleteHandler interface {
	Handle(DocumentDeleteParams) middleware.Responder
}

// NewDocumentDelete creates a new http.Handler for the document delete operation
func NewDocumentDelete(ctx *middleware.Context, handler DocumentDeleteHandler) *DocumentDelete {
	return &DocumentDelete{Context: ctx, Handler: handler}
}

/*DocumentDelete swagger:route DELETE /documents Document documentDelete

Удаление документа

*/
type DocumentDelete struct {
	Context *middleware.Context
	Handler DocumentDeleteHandler
}

func (o *DocumentDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDocumentDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DocumentDeleteInternalServerErrorBody document delete internal server error body
// swagger:model DocumentDeleteInternalServerErrorBody
type DocumentDeleteInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentDeleteInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// DocumentDeleteInternalServerErrorBodyAO0
	var documentDeleteInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &documentDeleteInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = documentDeleteInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentDeleteInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentDeleteInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentDeleteInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document delete internal server error body
func (o *DocumentDeleteInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentDeleteInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentDeleteInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DocumentDeleteInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentDeleteMethodNotAllowedBody document delete method not allowed body
// swagger:model DocumentDeleteMethodNotAllowedBody
type DocumentDeleteMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentDeleteMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// DocumentDeleteMethodNotAllowedBodyAO0
	var documentDeleteMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &documentDeleteMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = documentDeleteMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentDeleteMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentDeleteMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentDeleteMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document delete method not allowed body
func (o *DocumentDeleteMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentDeleteMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentDeleteMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res DocumentDeleteMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentDeleteNotFoundBody document delete not found body
// swagger:model DocumentDeleteNotFoundBody
type DocumentDeleteNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentDeleteNotFoundBody) UnmarshalJSON(raw []byte) error {
	// DocumentDeleteNotFoundBodyAO0
	var documentDeleteNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &documentDeleteNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = documentDeleteNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentDeleteNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentDeleteNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentDeleteNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document delete not found body
func (o *DocumentDeleteNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentDeleteNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentDeleteNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DocumentDeleteNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentDeleteOKBody document delete o k body
// swagger:model DocumentDeleteOKBody
type DocumentDeleteOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentDeleteOKBody) UnmarshalJSON(raw []byte) error {
	// DocumentDeleteOKBodyAO0
	var documentDeleteOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &documentDeleteOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = documentDeleteOKBodyAO0

	// DocumentDeleteOKBodyAO1
	var dataDocumentDeleteOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataDocumentDeleteOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataDocumentDeleteOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentDeleteOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	documentDeleteOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentDeleteOKBodyAO0)

	var dataDocumentDeleteOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataDocumentDeleteOKBodyAO1.Data = o.Data

	jsonDataDocumentDeleteOKBodyAO1, errDocumentDeleteOKBodyAO1 := swag.WriteJSON(dataDocumentDeleteOKBodyAO1)
	if errDocumentDeleteOKBodyAO1 != nil {
		return nil, errDocumentDeleteOKBodyAO1
	}
	_parts = append(_parts, jsonDataDocumentDeleteOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document delete o k body
func (o *DocumentDeleteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DocumentDeleteOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("documentDeleteOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DocumentDeleteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentDeleteOKBody) UnmarshalBinary(b []byte) error {
	var res DocumentDeleteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
