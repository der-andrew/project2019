// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Document400Data Ошибка валидации
// swagger:model Document_400_data
type Document400Data struct {
	ErrorData

	// errors
	Errors *Document400DataAO1Errors `json:"errors,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Document400Data) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ErrorData
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ErrorData = aO0

	// AO1
	var dataAO1 struct {
		Errors *Document400DataAO1Errors `json:"errors,omitempty"`

		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Errors = dataAO1.Errors

	m.Message = dataAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Document400Data) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ErrorData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Errors *Document400DataAO1Errors `json:"errors,omitempty"`

		Message string `json:"message,omitempty"`
	}

	dataAO1.Errors = m.Errors

	dataAO1.Message = m.Message

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document 400 data
func (m *Document400Data) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ErrorData
	if err := m.ErrorData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Document400Data) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if m.Errors != nil {
		if err := m.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Document400Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Document400Data) UnmarshalBinary(b []byte) error {
	var res Document400Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Document400DataAO1Errors document400 data a o1 errors
// swagger:model Document400DataAO1Errors
type Document400DataAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation *Document400DataAO1ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this document400 data a o1 errors
func (m *Document400DataAO1Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Document400DataAO1Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.Validation) { // not required
		return nil
	}

	if m.Validation != nil {
		if err := m.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Document400DataAO1Errors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Document400DataAO1Errors) UnmarshalBinary(b []byte) error {
	var res Document400DataAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Document400DataAO1ErrorsValidation document400 data a o1 errors validation
// swagger:model Document400DataAO1ErrorsValidation
type Document400DataAO1ErrorsValidation struct {

	// Кодификатор записи
	// Enum: [required string]
	Code string `json:"code,omitempty"`

	// Локаль справочника
	// Enum: [required string]
	Locale string `json:"locale,omitempty"`

	// Содержание записи
	// Enum: [required string]
	Text string `json:"text,omitempty"`

	// Тип справочника
	// Enum: [required string]
	Type string `json:"type,omitempty"`
}

// Validate validates this document400 data a o1 errors validation
func (m *Document400DataAO1ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var document400DataAO1ErrorsValidationTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["required","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		document400DataAO1ErrorsValidationTypeCodePropEnum = append(document400DataAO1ErrorsValidationTypeCodePropEnum, v)
	}
}

const (

	// Document400DataAO1ErrorsValidationCodeRequired captures enum value "required"
	Document400DataAO1ErrorsValidationCodeRequired string = "required"

	// Document400DataAO1ErrorsValidationCodeString captures enum value "string"
	Document400DataAO1ErrorsValidationCodeString string = "string"
)

// prop value enum
func (m *Document400DataAO1ErrorsValidation) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, document400DataAO1ErrorsValidationTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Document400DataAO1ErrorsValidation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("errors"+"."+"validation"+"."+"code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

var document400DataAO1ErrorsValidationTypeLocalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["required","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		document400DataAO1ErrorsValidationTypeLocalePropEnum = append(document400DataAO1ErrorsValidationTypeLocalePropEnum, v)
	}
}

const (

	// Document400DataAO1ErrorsValidationLocaleRequired captures enum value "required"
	Document400DataAO1ErrorsValidationLocaleRequired string = "required"

	// Document400DataAO1ErrorsValidationLocaleString captures enum value "string"
	Document400DataAO1ErrorsValidationLocaleString string = "string"
)

// prop value enum
func (m *Document400DataAO1ErrorsValidation) validateLocaleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, document400DataAO1ErrorsValidationTypeLocalePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Document400DataAO1ErrorsValidation) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocaleEnum("errors"+"."+"validation"+"."+"locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

var document400DataAO1ErrorsValidationTypeTextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["required","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		document400DataAO1ErrorsValidationTypeTextPropEnum = append(document400DataAO1ErrorsValidationTypeTextPropEnum, v)
	}
}

const (

	// Document400DataAO1ErrorsValidationTextRequired captures enum value "required"
	Document400DataAO1ErrorsValidationTextRequired string = "required"

	// Document400DataAO1ErrorsValidationTextString captures enum value "string"
	Document400DataAO1ErrorsValidationTextString string = "string"
)

// prop value enum
func (m *Document400DataAO1ErrorsValidation) validateTextEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, document400DataAO1ErrorsValidationTypeTextPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Document400DataAO1ErrorsValidation) validateText(formats strfmt.Registry) error {

	if swag.IsZero(m.Text) { // not required
		return nil
	}

	// value enum
	if err := m.validateTextEnum("errors"+"."+"validation"+"."+"text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

var document400DataAO1ErrorsValidationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["required","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		document400DataAO1ErrorsValidationTypeTypePropEnum = append(document400DataAO1ErrorsValidationTypeTypePropEnum, v)
	}
}

const (

	// Document400DataAO1ErrorsValidationTypeRequired captures enum value "required"
	Document400DataAO1ErrorsValidationTypeRequired string = "required"

	// Document400DataAO1ErrorsValidationTypeString captures enum value "string"
	Document400DataAO1ErrorsValidationTypeString string = "string"
)

// prop value enum
func (m *Document400DataAO1ErrorsValidation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, document400DataAO1ErrorsValidationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Document400DataAO1ErrorsValidation) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("errors"+"."+"validation"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Document400DataAO1ErrorsValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Document400DataAO1ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res Document400DataAO1ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
