// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/thesaurus/api/models"
)

// StatusViewHandlerFunc turns a function with the right signature into a status view handler
type StatusViewHandlerFunc func(StatusViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StatusViewHandlerFunc) Handle(params StatusViewParams) middleware.Responder {
	return fn(params)
}

// StatusViewHandler interface for that can handle valid status view params
type StatusViewHandler interface {
	Handle(StatusViewParams) middleware.Responder
}

// NewStatusView creates a new http.Handler for the status view operation
func NewStatusView(ctx *middleware.Context, handler StatusViewHandler) *StatusView {
	return &StatusView{Context: ctx, Handler: handler}
}

/*StatusView swagger:route GET /status Status statusView

Статус инстанса

*/
type StatusView struct {
	Context *middleware.Context
	Handler StatusViewHandler
}

func (o *StatusView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStatusViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.StatusObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.StatusObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StatusObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.StatusObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.StatusObject
	if err := o.StatusObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StatusViewInternalServerErrorBody status view internal server error body
// swagger:model StatusViewInternalServerErrorBody
type StatusViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StatusViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// StatusViewInternalServerErrorBodyAO0
	var statusViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &statusViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = statusViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StatusViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	statusViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, statusViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this status view internal server error body
func (o *StatusViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *StatusViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatusViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res StatusViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StatusViewMethodNotAllowedBody status view method not allowed body
// swagger:model StatusViewMethodNotAllowedBody
type StatusViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StatusViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// StatusViewMethodNotAllowedBodyAO0
	var statusViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &statusViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = statusViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StatusViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	statusViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, statusViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this status view method not allowed body
func (o *StatusViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *StatusViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatusViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res StatusViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StatusViewOKBody status view o k body
// swagger:model StatusViewOKBody
type StatusViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StatusViewOKBody) UnmarshalJSON(raw []byte) error {
	// StatusViewOKBodyAO0
	var statusViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &statusViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = statusViewOKBodyAO0

	// StatusViewOKBodyAO1
	var dataStatusViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataStatusViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataStatusViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StatusViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	statusViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, statusViewOKBodyAO0)

	var dataStatusViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataStatusViewOKBodyAO1.Data = o.Data

	jsonDataStatusViewOKBodyAO1, errStatusViewOKBodyAO1 := swag.WriteJSON(dataStatusViewOKBodyAO1)
	if errStatusViewOKBodyAO1 != nil {
		return nil, errStatusViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataStatusViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this status view o k body
func (o *StatusViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatusViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("statusViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statusViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StatusViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatusViewOKBody) UnmarshalBinary(b []byte) error {
	var res StatusViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
