// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// StatusViewOKCode is the HTTP code returned for type StatusViewOK
const StatusViewOKCode int = 200

/*StatusViewOK Объект информации об инстансе

swagger:response statusViewOK
*/
type StatusViewOK struct {

	/*
	  In: Body
	*/
	Payload *StatusViewOKBody `json:"body,omitempty"`
}

// NewStatusViewOK creates StatusViewOK with default headers values
func NewStatusViewOK() *StatusViewOK {

	return &StatusViewOK{}
}

// WithPayload adds the payload to the status view o k response
func (o *StatusViewOK) WithPayload(payload *StatusViewOKBody) *StatusViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the status view o k response
func (o *StatusViewOK) SetPayload(payload *StatusViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StatusViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StatusViewMethodNotAllowedCode is the HTTP code returned for type StatusViewMethodNotAllowed
const StatusViewMethodNotAllowedCode int = 405

/*StatusViewMethodNotAllowed Invalid Method

swagger:response statusViewMethodNotAllowed
*/
type StatusViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *StatusViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewStatusViewMethodNotAllowed creates StatusViewMethodNotAllowed with default headers values
func NewStatusViewMethodNotAllowed() *StatusViewMethodNotAllowed {

	return &StatusViewMethodNotAllowed{}
}

// WithPayload adds the payload to the status view method not allowed response
func (o *StatusViewMethodNotAllowed) WithPayload(payload *StatusViewMethodNotAllowedBody) *StatusViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the status view method not allowed response
func (o *StatusViewMethodNotAllowed) SetPayload(payload *StatusViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StatusViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StatusViewInternalServerErrorCode is the HTTP code returned for type StatusViewInternalServerError
const StatusViewInternalServerErrorCode int = 500

/*StatusViewInternalServerError Internal server error

swagger:response statusViewInternalServerError
*/
type StatusViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *StatusViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewStatusViewInternalServerError creates StatusViewInternalServerError with default headers values
func NewStatusViewInternalServerError() *StatusViewInternalServerError {

	return &StatusViewInternalServerError{}
}

// WithPayload adds the payload to the status view internal server error response
func (o *StatusViewInternalServerError) WithPayload(payload *StatusViewInternalServerErrorBody) *StatusViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the status view internal server error response
func (o *StatusViewInternalServerError) SetPayload(payload *StatusViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StatusViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
