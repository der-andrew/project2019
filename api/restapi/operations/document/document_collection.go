// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/thesaurus/api/models"
)

// DocumentCollectionHandlerFunc turns a function with the right signature into a document collection handler
type DocumentCollectionHandlerFunc func(DocumentCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DocumentCollectionHandlerFunc) Handle(params DocumentCollectionParams) middleware.Responder {
	return fn(params)
}

// DocumentCollectionHandler interface for that can handle valid document collection params
type DocumentCollectionHandler interface {
	Handle(DocumentCollectionParams) middleware.Responder
}

// NewDocumentCollection creates a new http.Handler for the document collection operation
func NewDocumentCollection(ctx *middleware.Context, handler DocumentCollectionHandler) *DocumentCollection {
	return &DocumentCollection{Context: ctx, Handler: handler}
}

/*DocumentCollection swagger:route GET /documents Document documentCollection

Коллекция документов

*/
type DocumentCollection struct {
	Context *middleware.Context
	Handler DocumentCollectionHandler
}

func (o *DocumentCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDocumentCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.DocumentParam
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.DocumentParam
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.DocumentParam = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.DocumentParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DocumentParam
	if err := o.DocumentParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentCollectionInternalServerErrorBody document collection internal server error body
// swagger:model DocumentCollectionInternalServerErrorBody
type DocumentCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// DocumentCollectionInternalServerErrorBodyAO0
	var documentCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &documentCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = documentCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document collection internal server error body
func (o *DocumentCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DocumentCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentCollectionMethodNotAllowedBody document collection method not allowed body
// swagger:model DocumentCollectionMethodNotAllowedBody
type DocumentCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// DocumentCollectionMethodNotAllowedBodyAO0
	var documentCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &documentCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = documentCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document collection method not allowed body
func (o *DocumentCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res DocumentCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentCollectionNotFoundBody document collection not found body
// swagger:model DocumentCollectionNotFoundBody
type DocumentCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// DocumentCollectionNotFoundBodyAO0
	var documentCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &documentCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = documentCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	documentCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document collection not found body
func (o *DocumentCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DocumentCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DocumentCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DocumentCollectionOKBody document collection o k body
// swagger:model DocumentCollectionOKBody
type DocumentCollectionOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DocumentCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// DocumentCollectionOKBodyAO0
	var documentCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &documentCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = documentCollectionOKBodyAO0

	// DocumentCollectionOKBodyAO1
	var dataDocumentCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataDocumentCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataDocumentCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DocumentCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	documentCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, documentCollectionOKBodyAO0)

	var dataDocumentCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataDocumentCollectionOKBodyAO1.Data = o.Data

	jsonDataDocumentCollectionOKBodyAO1, errDocumentCollectionOKBodyAO1 := swag.WriteJSON(dataDocumentCollectionOKBodyAO1)
	if errDocumentCollectionOKBodyAO1 != nil {
		return nil, errDocumentCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataDocumentCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document collection o k body
func (o *DocumentCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DocumentCollectionOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("documentCollectionOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documentCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DocumentCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DocumentCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res DocumentCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
